import aiohttp
import logging
import json
import time
from typing import Optional, Tuple, Dict
from core import load_config
from services.kinopoisk_key_manager import KinopoiskApiKeyManager


config = load_config()
key_manager = KinopoiskApiKeyManager(config.KINOPOISK_API_KEYS)

class KinopoiskAPI:
    def __init__(self):
        self.base_url = "https://kinopoiskapiunofficial.tech/api/v2.2"
        self.key_manager = key_manager
        self.headers = {
            "X-API-KEY": self.key_manager.current_key,
            "Content-Type": "application/json"
        }
        self._filters_cache = None
        self._cache_timestamp = None
        self._cache_duration = 3600  # 1 —á–∞—Å

        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∂–∞–Ω—Ä–æ–≤ –∏ –∏—Ö ID
        self.genre_ids = {
            "–õ—é–±–æ–π": "none",  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–õ—é–±–æ–π"
            "–¢—Ä–∏–ª–ª–µ—Ä": 1, "–î—Ä–∞–º–∞": 2, "–ö—Ä–∏–º–∏–Ω–∞–ª": 3, "–ú–µ–ª–æ–¥—Ä–∞–º–∞": 4, 
            "–î–µ—Ç–µ–∫—Ç–∏–≤": 5, "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": 6, "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": 7, 
            "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è": 8, "–§–∏–ª—å–º-–Ω—É–∞—Ä": 9, "–í–µ—Å—Ç–µ—Ä–Ω": 10, 
            "–ë–æ–µ–≤–∏–∫": 11, "–§—ç–Ω—Ç–µ–∑–∏": 12, "–ö–æ–º–µ–¥–∏—è": 13, "–í–æ–µ–Ω–Ω—ã–π": 14,
            "–ò—Å—Ç–æ—Ä–∏—è": 15, "–ú—É–∑—ã–∫–∞": 16, "–£–∂–∞—Å—ã": 17, "–ú—É–ª—å—Ç—Ñ–∏–ª—å–º": 18,
            "–°–µ–º–µ–π–Ω—ã–π": 19, "–ú—é–∑–∏–∫–ª": 20, "–°–ø–æ—Ä—Ç": 21, "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π": 22,
            "–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞": 23, "–ê–Ω–∏–º–µ": 24, "–ù–æ–≤–æ—Å—Ç–∏": 26,
            "–ö–æ–Ω—Ü–µ—Ä—Ç": 27, "–î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö": 28, "–¶–µ—Ä–µ–º–æ–Ω–∏—è": 29,
            "–†–µ–∞–ª—å–Ω–æ–µ –¢–í": 30, "–ò–≥—Ä–∞": 31, "–¢–æ–∫-—à–æ—É": 32, "–î–µ—Ç—Å–∫–∏–π": 33
        }

        # –°–ª–æ–≤–∞—Ä—å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        self.rating_ranges = {
            "–õ—é–±–æ–π": "none",  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–õ—é–±–æ–π"
            "–î–æ 4": "1",
            "4-6": "2",
            "6-7": "3",
            "7-8": "4", 
            "8-9": "5",
            "9+": "6"
        }

        # –°–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è API
        self.rating_values = {
            "none": (0, 10),  # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è "–õ—é–±–æ–π"
            "1": (0, 4),
            "2": (4, 6),
            "3": (6, 7),
            "4": (7, 8),
            "5": (8, 9),
            "6": (9, 10)
        }

        # –°–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–∞–Ω –∏ –∏—Ö ID
        self.country_ids = {
            "–õ—é–±–∞—è": "none",  # Default option
            "–°–®–ê": 1,
            "–†–æ—Å—Å–∏—è": 34,
            "–°–°–°–†": 33,
            "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": 5,
            "–§—Ä–∞–Ω—Ü–∏—è": 3,
            "–ò—Ç–∞–ª–∏—è": 10,
            "–ò—Å–ø–∞–Ω–∏—è": 8,
            "–ì–µ—Ä–º–∞–Ω–∏—è": 9,
            "–ö–∞–Ω–∞–¥–∞": 14,
            "–Ø–ø–æ–Ω–∏—è": 16,
            "–ö–∏—Ç–∞–π": 21,
            "–ö–æ—Ä–µ—è –Æ–∂–Ω–∞—è": 49,
            "–ê–≤—Å—Ç—Ä–∞–ª–∏—è": 13,
            "–ò–Ω–¥–∏—è": 7,
            "–ë—Ä–∞–∑–∏–ª–∏—è": 30,
            "–®–≤–µ—Ü–∏—è": 6,
            "–î–∞–Ω–∏—è": 17,
            "–ù–æ—Ä–≤–µ–≥–∏—è": 22,
            "–ò—Ä–ª–∞–Ω–¥–∏—è": 19,
            "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": 23,
            "–ë–µ–ª—å–≥–∏—è": 45,
            "–®–≤–µ–π—Ü–∞—Ä–∏—è": 2,
            "–ê–≤—Å—Ç—Ä–∏—è": 27,
            "–ü–æ–ª—å—à–∞": 4,
            "–ß–µ—Ö–∏—è": 18,
            "–í–µ–Ω–≥—Ä–∏—è": 48,
            "–ì—Ä–µ—Ü–∏—è": 63,
            "–¢—É—Ä—Ü–∏—è": 44,
            "–ú–µ–∫—Å–∏–∫–∞": 15,
            "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞": 24
        }

        # –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.sort_options = {
            "none": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚ö°",  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            "RATING": "–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É ‚≠ê",
            "NUM_VOTE": "–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ üî•",
            "YEAR": "–ü–æ –≥–æ–¥—É –≤—ã—Ö–æ–¥–∞ üìÖ"
        }
        
    async def _make_request(self, endpoint: str, params: dict = None) -> dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–µ—Ä–µ–±–æ—Ä–æ–º –∫–ª—é—á–µ–π"""
        url = f"{self.base_url}/{endpoint}"
        logging.info(f"[KINOPOISK API] Sending request to API")
        logging.info(f"[KINOPOISK API] Request params: {json.dumps(params, ensure_ascii=False)}")
        for _ in range(len(self.key_manager.api_keys)):
            headers = {
                "X-API-KEY": self.key_manager.current_key,
                "Content-Type": "application/json"
            }
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, params=params, headers=headers) as response:
                        status = response.status
                        response_text = await response.text()
                        logging.info(f"[KINOPOISK API] Response status: {status}")
                        if status == 200:
                            return await response.json()
                        elif status == 402:
                            logging.warning(f"[KINOPOISK API] API key limit reached: {self.key_manager.current_key}. Switching key...")
                            try:
                                self.key_manager.next_key()
                            except RuntimeError:
                                logging.error(f"[KINOPOISK API] All API keys exhausted.")
                                return None
                            continue
                        else:
                            logging.error(f"[KINOPOISK API] Error response: {response_text}")
                            return None
            except Exception as e:
                logging.error(f"[KINOPOISK API] Request error: {str(e)}")
                return None
        logging.error(f"[KINOPOISK API] No valid API keys left.")
        return None

    @staticmethod
    async def parse_search_query(query: str) -> Tuple[str, Optional[int], Optional[str]]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, –≥–æ–¥ –∏ –∂–∞–Ω—Ä"""
        parts = [part.strip() for part in query.split(',')]
        
        title = parts[0] if parts else ""
        year = None
        genre = None
        
        if len(parts) > 1 and parts[1]:
            try:
                year = int(parts[1])
            except ValueError:
                pass
                
        if len(parts) > 2:
            genre = parts[2].lower()
        
        return title, year, genre

    async def search_films(self, query: str, page: int = 1, filters: dict = None) -> dict:
        """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤"""
        params = {
            'keyword': query,
            'page': page
        }
        
        if filters:
            logging.info(f"[KINOPOISK API] Raw filters received: {json.dumps(filters, ensure_ascii=False)}")
            
            if 'countries' in filters:
                country_id = filters['countries']
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞
                if country_id and country_id != 'none':
                    params['countries'] = country_id

            if 'genres' in filters:
                genre_id = filters['genres']
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∂–∞–Ω—Ä
                if genre_id and genre_id != 'none':
                    params['genres'] = genre_id
            
            if 'yearFrom' in filters:
                params['yearFrom'] = filters['yearFrom']
            
            if 'yearTo' in filters:
                params['yearTo'] = filters['yearTo']
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
            if 'ratingFrom' in filters:
                params['ratingFrom'] = filters['ratingFrom']
                
            if 'ratingTo' in filters:
                params['ratingTo'] = filters['ratingTo']

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if 'order' in filters:
                params['order'] = filters['order']
        
            logging.info(f"[KINOPOISK API] Prepared search params: {json.dumps(params, ensure_ascii=False)}")

        return await self._make_request("films", params)

    async def get_film_details(self, film_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ"""
        return await self._make_request(f"films/{film_id}")

    async def get_collection(self, collection_type: str = "TOP_250_MOVIES", page: int = 1) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤
        
        :param collection_type: –¢–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (TOP_250_MOVIES, TOP_POPULAR_ALL –∏ —Ç.–¥.)
        :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        params = {
            "type": collection_type,
            "page": page
        }
        return await self._make_request("films/collections", params)

    async def get_film_name(self, film_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (—Ä—É—Å—Å–∫–æ–µ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ) –ø–æ ID"""
        film_details = await self.get_film_details(film_id)
        if not film_details:
            return None
            
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç - –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ
        return film_details.get('nameRu') or film_details.get('nameEn')

    async def get_filters(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã (—Å—Ç—Ä–∞–Ω—ã, –∂–∞–Ω—Ä—ã) –∏–∑ API"""
        current_time = time.time()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        if (self._filters_cache and self._cache_timestamp and 
            current_time - self._cache_timestamp < self._cache_duration):
            return self._filters_cache

        response = await self._make_request("films/filters")
        if response:
            self._filters_cache = response
            self._cache_timestamp = current_time
            
        return self._filters_cache

    @property
    async def countries(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏–∑ API"""
        filters = await self.get_filters()
        return filters.get('countries', []) if filters else []

    @property
    async def genres(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –∏–∑ API"""
        filters = await self.get_filters()
        return filters.get('genres', []) if filters else []

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
kinopoisk_api = KinopoiskAPI()
