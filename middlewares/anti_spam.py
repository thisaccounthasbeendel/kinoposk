from typing import Dict
import asyncio
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from core import setup_logger
from services.redis_service import RedisService

logger = setup_logger()

class AntiSpamMiddleware(BaseMiddleware):
    def __init__(self, limit: int = 110, timeout: int = 3):
        super().__init__()
        self.limit = limit
        self.timeout = timeout

    async def __call__(self, handler, event, data):
        if isinstance(event, (Message, CallbackQuery)):
            user_id = event.from_user.id
            current_time = asyncio.get_event_loop().time()
            redis_service = RedisService.get_instance()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç–∞–Ω—Å
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            timestamps = await redis_service.get_user_spam_timestamps(user_id)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            timestamps = [t for t in timestamps if current_time - t < self.timeout]
            timestamps.append(current_time)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await redis_service.update_spam_timestamps(user_id, timestamps, self.timeout)
            
            if len(timestamps) > self.limit:
                logger.info(f"ü§° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–æ—É–Ω–∞ {self.timeout} —Å–µ–∫—É–Ω–¥(—ã).")
                return
                
        return await handler(event, data)
