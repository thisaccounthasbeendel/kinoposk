from aiogram import Router, F, types
from keyboards.tops import get_tops_menu
from keyboards.pagination import get_pagination_keyboard
from services.kinopoisk_api import kinopoisk_api
from constants import TOPS_RESULTS_TEMPLATE
import logging

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è callback_data –∏ —Ç–∏–ø–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π API
COLLECTION_TYPES = {
    "tpop": "TOP_POPULAR_ALL",
    "tnew": "TOP_POPULAR_MOVIES",
    "t250": "TOP_250_MOVIES",
    "tcin": "TOP_AWAIT_MOVIES"
}

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è callback_data –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–π
COLLECTION_NAMES = {
    "tpop": "üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ",
    "tnew": "üÜï –ù–æ–≤–∏–Ω–∫–∏",
    "t250": "‚≠ê –¢–æ–ø 250",
    "tcin": "üé¨ –°–µ–π—á–∞—Å –≤ –∫–∏–Ω–æ"
}

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
FILMS_PER_PAGE = 10

async def show_tops_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å —Ç–æ–ø–∞–º–∏ —Ñ–∏–ª—å–º–æ–≤"""
    try:
        await callback.message.edit_text(
            "üèÜ <b>–¢–æ–ø—ã —Ñ–∏–ª—å–º–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_tops_menu().as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error in show_tops_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_top_collection(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ñ–∏–ª—å–º–æ–≤"""
    try:
        collection_type = callback.data
        api_collection_type = COLLECTION_TYPES.get(collection_type)
        collection_name = COLLECTION_NAMES.get(collection_type)

        result = await kinopoisk_api.get_collection(api_collection_type, 1)
        if not result:
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return

        total_films = result.get('total', 0)
        if total_films == 0:
            await callback.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        custom_total_pages = (total_films + FILMS_PER_PAGE - 1) // FILMS_PER_PAGE
        films = result.get('items', [])[:FILMS_PER_PAGE]

        keyboard = get_pagination_keyboard(collection_type, 1, custom_total_pages, films)

        message_text = TOPS_RESULTS_TEMPLATE.format(
            collection_name=collection_name,
            page=1,
            total_pages=custom_total_pages,
            total_films=total_films
        )

        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error in show_top_collection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_top_pagination(callback: types.CallbackQuery, collection_type: str, page: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ —Ç–æ–ø–∞—Ö —Ñ–∏–ª—å–º–æ–≤"""
    try:
        api_collection_type = COLLECTION_TYPES.get(collection_type)
        collection_name = COLLECTION_NAMES.get(collection_type)

        result = await kinopoisk_api.get_collection(api_collection_type, page)
        if not result or 'items' not in result:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            return

        total_films = result.get('total', 0)
        films = result.get('items', [])[:FILMS_PER_PAGE]
        custom_total_pages = (total_films + FILMS_PER_PAGE - 1) // FILMS_PER_PAGE

        message_text = TOPS_RESULTS_TEMPLATE.format(
            collection_name=collection_name,
            page=page,
            total_pages=custom_total_pages,
            total_films=total_films
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        if callback.data.startswith('btr_'):
            await callback.message.delete()
            await callback.message.answer(
                text=message_text,
                reply_markup=get_pagination_keyboard(collection_type, page, custom_total_pages, films).as_markup(),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                text=message_text,
                reply_markup=get_pagination_keyboard(collection_type, page, custom_total_pages, films).as_markup(),
                parse_mode="HTML"
            )
        
    except Exception as e:
        logging.error(f"Error in process_top_pagination: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

def register_tops_handlers(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ–ø–æ–≤ —Ñ–∏–ª—å–º–æ–≤"""
    router.callback_query.register(show_tops_menu, F.data == "tops")
    router.callback_query.register(show_top_collection, F.data.in_(COLLECTION_TYPES.keys()))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ç–æ–ø–∞—Ö
    async def handle_top_pagination(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ç–æ–ø–∞—Ö"""
        try:
            parts = callback.data.split('_')
            collection_type = parts[0]  # tpop, tnew, t250, tcin
            page = int(parts[2])  # –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

            await process_top_pagination(callback, collection_type, page)
        except Exception as e:
            logging.error(f"Error in handle_top_pagination: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    router.callback_query.register(
        handle_top_pagination,
        F.data.regexp(r'^(tpop|tnew|t250|tcin)_page_\d+$')
    )
