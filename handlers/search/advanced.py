from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.advanced_search import get_advanced_search_keyboard
from keyboards.main import get_main_menu
from keyboards.pagination import get_pagination_keyboard
from keyboards.search import get_cancel_keyboard_adv
from services.redis_service import RedisService
from services.kinopoisk_api import kinopoisk_api
from constants import WELCOME_MESSAGE, ADV_SEARCH_RESULTS_TEMPLATE
from handlers.search.basic import FILMS_PER_PAGE  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.validators import TextValidator
from aiogram.filters.callback_data import CallbackData
import logging
import json
import hashlib

router = Router()

class AdvancedSearchStates(StatesGroup):
    waiting_for_query = State()

class AdvancedSearchCallbackFactory(CallbackData, prefix="adv_search"):
    action: str

async def show_advanced_search(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º Redis —Å–µ—Ä–≤–∏—Å
        redis_service = RedisService.get_instance()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        filters, _ = await redis_service.get_search_filters(callback.from_user.id) or {}
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        edited_msg = await callback.message.edit_text(
            "üîé <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_advanced_search_keyboard(filters).as_markup(),
            parse_mode="HTML"
        )
        
        # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await redis_service.save_search_filters(
            callback.from_user.id,
            filters or {},  # –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã None, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            edited_msg.message_id
        )
        
        await callback.answer()
            
    except Exception as e:
        logging.error(f"[ADVANCED SEARCH] Error showing menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")

async def show_genres(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º"""
    # –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üé≠ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä",
        switch_inline_query_current_chat="#—Ñ–∏–ª—å—Ç—Ä_–∂–∞–Ω—Ä "  # –ü—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ –≤–∞–∂–µ–Ω
    )
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="advanced_search")
    builder.adjust(1)
    
    await callback.message.answer(
        "üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

async def process_genre_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞"""
    try:
        genre_code = callback.data.split('_')[1]
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ message_id
        redis_service = RedisService.get_instance()
        filters, keyboard_message_id = await redis_service.get_search_filters(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä
        filters['genre'] = genre_code
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if keyboard_message_id:
            try:
                await callback.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=keyboard_message_id
                )
            except Exception as e:
                logging.error(f"Error deleting keyboard message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        new_msg = await callback.message.answer(
            "üîé <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_advanced_search_keyboard(filters).as_markup(),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–æ–≤—ã–π message_id
        await redis_service.save_search_filters(user_id, filters, new_msg.message_id)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"[ADVANCED SEARCH] Error processing genre selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∂–∞–Ω—Ä–∞")

async def process_rating_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    try:
        rating_id = callback.data.split('_')[1]
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ message_id
        redis_service = RedisService.get_instance()
        filters, keyboard_message_id = await redis_service.get_search_filters(user_id)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if keyboard_message_id:
            try:
                await callback.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=keyboard_message_id
                )
            except Exception as e:
                logging.error(f"Error deleting old keyboard message: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        filters['rating'] = rating_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        new_msg = await callback.message.answer(
            "üîé <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_advanced_search_keyboard(filters).as_markup(),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–æ–≤—ã–π message_id
        await redis_service.save_search_filters(user_id, filters, new_msg.message_id)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"[RATING] Error processing rating selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")

async def process_sort_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    try:
        sort_key = callback.data.split('_')[1]
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ message_id
        redis_service = RedisService.get_instance()
        filters, keyboard_message_id = await redis_service.get_search_filters(user_id)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if keyboard_message_id:
            try:
                await callback.bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=keyboard_message_id
                )
            except Exception as e:
                logging.error(f"Error deleting old keyboard message: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        filters['sort_by'] = sort_key
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        new_msg = await callback.message.answer(
            "üîé <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_advanced_search_keyboard(filters).as_markup(),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–æ–≤—ã–π message_id
        await redis_service.save_search_filters(user_id, filters, new_msg.message_id)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"[SORT] Error processing sort selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")

async def reset_filters(callback: types.CallbackQuery):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
    logging.info(f"[ADVANCED SEARCH] Resetting filters for user {callback.from_user.id}")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –ø—É—Å—Ç—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        new_msg = await callback.message.answer(
            "üîé <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_advanced_search_keyboard({}).as_markup(),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–æ–≤—ã–π message_id
        redis_service = RedisService.get_instance()
        await redis_service.save_search_filters(
            callback.from_user.id, 
            {},  # –ø—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            new_msg.message_id  # –≤–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
        
        await callback.answer("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
        
    except Exception as e:
        logging.error(f"[ADVANCED SEARCH] Error resetting filters: {e}")

async def get_user_filters(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    redis_service = RedisService.get_instance()
    filters_json = await redis_service.get(f"searchFilters:{user_id}")
    return json.loads(filters_json) if filters_json else {}

async def save_user_filters(user_id: int, filters: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    redis_service = RedisService.get_instance()
    await redis_service.set(
        f"searchFilters:{user_id}",
        json.dumps(filters),
        ex=3600  # –•—Ä–∞–Ω–∏–º 1 —á–∞—Å
    )

async def show_countries(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º"""
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()
    await callback.answer()
    
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üåç –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É",
        switch_inline_query_current_chat="#—Ñ–∏–ª—å—Ç—Ä_—Å—Ç—Ä–∞–Ω–∞ "
    )
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="advanced_search")
    builder.adjust(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

async def back_to_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        WELCOME_MESSAGE,
        reply_markup=get_main_menu().as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data == "cancel_search_adv")
async def cancel_advanced_search(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    current_state = await state.get_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    if current_state != AdvancedSearchStates.waiting_for_query.state:
        await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        try:
            await callback.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        return

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        text=WELCOME_MESSAGE,
        reply_markup=get_main_menu().as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "adv_search_start")
async def start_filtered_search(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    redis_service = RedisService.get_instance()
    filters, _ = await redis_service.get_search_filters(user_id)
    
    logging.info(f"[ADVANCED SEARCH] Starting filtered search with filters: {json.dumps(filters, ensure_ascii=False)}")
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    await callback.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_message = await callback.message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_cancel_keyboard_adv().as_markup()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.set_data({'cancel_message': cancel_message})
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –°–í–û–Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AdvancedSearchStates.waiting_for_query)
    await callback.answer()

# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_advanced_search_handlers(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    router.callback_query.register(show_advanced_search, F.data == "advanced_search")
    router.callback_query.register(reset_filters, F.data == "adv_reset")
    router.callback_query.register(show_genres, F.data == "adv_genre")
    router.callback_query.register(show_countries, F.data == "adv_country")
    router.callback_query.register(start_filtered_search, F.data == "adv_search_start")
    router.callback_query.register(search_by_filters_only, F.data == "adv_search_filters_only")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data
    router.callback_query.register(cancel_advanced_search, F.data == "cancel_search_adv")
    router.callback_query.register(back_to_main_menu, F.data == "main_menu")
    
    # –ó–∞—Ç–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
    router.callback_query.register(process_genre_selection, lambda c: c.data.startswith("genre_"))
    router.callback_query.register(process_rating_selection, lambda c: c.data.startswith("rating_"))
    router.callback_query.register(process_sort_selection, lambda c: c.data.startswith("sort_"))
    
    # –í –∫–æ–Ω—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∞–º—ã–π –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    router.callback_query.register(
        handle_advanced_search_pagination,
        lambda c: c.data and c.data.startswith("adv_")  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º adv_{hash}_{page}
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    router.message.register(process_advanced_search_query, AdvancedSearchStates.waiting_for_query)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–í–û–Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    router.callback_query.register(return_to_filters, lambda c: c.data.startswith("back_to_filters_"))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
@router.message(AdvancedSearchStates.waiting_for_query)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–í–û–Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def process_advanced_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    try:
        query = message.text.strip()
        safe_query = TextValidator.sanitize_text(query)
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        state_data = await state.get_data()
        cancel_message = state_data.get('cancel_message')
        
        redis_service = RedisService.get_instance()
        filters, _ = await redis_service.get_search_filters(user_id)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç API
        api_filters = {}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–Ω—Ä–∞
        if 'genre' in filters:
            api_filters['genres'] = filters['genre']['id']
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω—ã
        if 'country' in filters:
            api_filters['countries'] = filters['country']['id']
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞
        if 'year' in filters:
            year_range = filters['year']['range'].split('-')
            api_filters['yearFrom'] = int(year_range[0])
            api_filters['yearTo'] = int(year_range[1] if len(year_range) > 1 else year_range[0])
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        if 'rating' in filters:
            rating_range = filters['rating']['range'].split('-')
            api_filters['ratingFrom'] = float(rating_range[0])
            api_filters['ratingTo'] = float(rating_range[1] if len(rating_range) > 1 else 10)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if 'sort_by' in filters and filters['sort_by'] != 'none':
            api_filters['order'] = filters['sort_by']

        logging.info(f"[ADVANCED SEARCH] Prepared API filters: {api_filters}")

        search_id = generate_advanced_search_id(safe_query, user_id)
        search_data = {
            'query': safe_query,
            'filters': api_filters
        }
        await redis_service.store_query(f"adv_{search_id}", json.dumps(search_data))

        result = await kinopoisk_api.search_films(safe_query, 1, api_filters)
        
        if not result:
            await message.answer(
                "üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
                reply_markup=get_main_menu().as_markup()
            )
            if cancel_message:
                await cancel_message.delete()
            await state.clear()
            return

        total_films = result.get('total', 0)
        films = result.get('items', [])[:FILMS_PER_PAGE]
        total_pages = (total_films + FILMS_PER_PAGE - 1) // FILMS_PER_PAGE

        keyboard = get_pagination_keyboard(f"adv_{search_id}", 1, total_pages, films)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø—Ä–æ—Å–æ–º
        await message.delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        if cancel_message:
            await cancel_message.delete()

        await message.answer(
            format_search_results(
                query=safe_query,
                filters=format_filters_for_display(filters),
                total_films=total_films,
                page=1,
                total_pages=total_pages
            ),
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )

        await state.clear()

    except Exception as e:
        logging.error(f"[ADVANCED SEARCH] Error: {e}")
        await message.answer(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu().as_markup()
        )
        if cancel_message:
            await cancel_message.delete()
        await state.clear()

def format_filters_for_display(filters: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    parts = []
    if 'genre' in filters:
        parts.append(f"üé≠ –ñ–∞–Ω—Ä: {filters['genre']['name']}")
    if 'country' in filters:
        parts.append(f"üåç –°—Ç—Ä–∞–Ω–∞: {filters['country']['name']}")
    if 'year' in filters:
        parts.append(f"üìÖ –ì–æ–¥: {filters['year']['range']}")
    if 'sort_by' in filters and filters['sort_by'] != 'none':
        sort_names = {
            'RATING': '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É ‚≠ê',
            'NUM_VOTE': '–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ üë•',
            'YEAR': '–ü–æ –≥–æ–¥—É üìÖ'
        }
        parts.append(f"üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_names.get(filters['sort_by'], filters['sort_by'])}")
    
    return "\n".join(parts) if parts else "–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"

def format_search_results(query: str, filters: str, total_films: int, page: int, total_pages: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    return ADV_SEARCH_RESULTS_TEMPLATE.format(
        query=query,
        filters=filters,
        total_films=total_films,
        page=page,
        total_pages=total_pages
    )

@router.callback_query(lambda c: c.data.startswith('adv_'))
async def handle_advanced_search_pagination(callback: types.CallbackQuery):
    try:
        parts = callback.data.split('_')
        if len(parts) != 4:
            raise ValueError(f"Invalid callback data format: {callback.data}")
            
        search_hash = parts[1]
        page = int(parts[3])
        
        redis_service = RedisService.get_instance()
        search_data_json = await redis_service.get_query(f"adv_{search_hash}")
        if not search_data_json:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
            return
            
        search_data = json.loads(search_data_json)
        query = search_data['query']
        api_filters = search_data['filters']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        api_page = (page - 1) // 2 + 1
        result = await kinopoisk_api.search_films(query, api_page, api_filters)
        
        if not result:
            await callback.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        total_films = result.get('total', 0)
        total_pages = (total_films + FILMS_PER_PAGE - 1) // FILMS_PER_PAGE
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –ø–æ–ª–æ–≤–∏–Ω—É
        films = result.get('items', [])
        start_idx = ((page - 1) % 2) * FILMS_PER_PAGE
        films = films[start_idx:start_idx + FILMS_PER_PAGE]
        
        keyboard = get_pagination_keyboard(f"adv_{search_hash}", page, total_pages, films)
        
        filters, _ = await redis_service.get_search_filters(callback.from_user.id)
        filters_display = format_filters_for_display(filters)
        
        await callback.message.edit_text(
            text=format_search_results(
                query=query,
                filters=filters_display,
                total_films=total_films,
                page=page,
                total_pages=total_pages
            ),
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logging.error(f"[ADVANCED SEARCH] Error in pagination: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

async def process_advanced_search_pagination(callback: types.CallbackQuery, search_hash: str, page: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    redis_service = RedisService.get_instance()
    try:
        search_data_json = await redis_service.get_query(f"adv_{search_hash}")
        if not search_data_json:
            logging.error(f"[ADVANCED SEARCH] Failed to get search data from Redis for hash: {search_hash}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
            return
            
        search_data = json.loads(search_data_json)
        original_query = search_data['query']
        filters = search_data['filters']
            
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è API
        api_page = (page - 1) // 2 + 1
        result = await kinopoisk_api.search_films(original_query, api_page, filters)
        
        if not result:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
            return

        total_films = result.get('total', 0)
        films = result.get('items', [])
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = ((page - 1) % 2) * FILMS_PER_PAGE
        films = films[start_idx:start_idx + FILMS_PER_PAGE]
        
        total_pages = (total_films + FILMS_PER_PAGE - 1) // FILMS_PER_PAGE

        keyboard = get_pagination_keyboard(f"adv_{search_hash}", page, total_pages, films)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª—å–º–∞
        if callback.data.startswith('btr_'):
            await callback.message.delete()
            await callback.message.answer(
                text=format_search_results(
                    query=original_query,
                    filters=format_filters_for_display(filters),
                    total_films=total_films,
                    page=page,
                    total_pages=total_pages
                ),
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                text=format_search_results(
                    query=original_query,
                    filters=format_filters_for_display(filters),
                    total_films=total_films,
                    page=page,
                    total_pages=total_pages
                ),
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )

    except Exception as e:
        logging.error(f"[ADVANCED SEARCH] Error in pagination: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
router.callback_query.register(start_filtered_search, F.data == "adv_search_start")

def generate_advanced_search_id(query: str, user_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –≤–∫–ª—é—á–∞—è –∏ –∑–∞–ø—Ä–æ—Å –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ—Å—Ç–∞—Ç—å –µ–≥–æ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ Redis
    """
    combined = f"{query}:{user_id}"
    return hashlib.md5(combined.encode()).hexdigest()[:8]

@router.callback_query(lambda c: c.data.startswith("back_to_filters_"))
async def return_to_filters(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        user_id = callback.from_user.id
        redis_service = RedisService.get_instance()
        filters, _ = await redis_service.get_search_filters(user_id)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        edited_msg = await callback.message.edit_text(
            "üîé <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_advanced_search_keyboard(filters).as_markup(),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await redis_service.save_search_filters(
            user_id,
            filters,
            edited_msg.message_id
        )
        
        await callback.answer()
        
    except Exception as e:
        logging.error(f"[ADVANCED SEARCH] Error returning to filters: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º")

@router.callback_query(F.data == "adv_search_filters_only")
async def search_by_filters_only(callback: types.CallbackQuery):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –±–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        redis_service = RedisService.get_instance()
        filters, _ = await redis_service.get_search_filters(user_id)
        
        logging.info(f"[ADVANCED SEARCH] Starting filters-only search with filters: {json.dumps(filters, ensure_ascii=False)}")
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        await callback.message.delete()
        
        # –°—Ä–∞–∑—É –¥–µ–ª–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø—É—Å—Ç—ã–º query
        result = await kinopoisk_api.search_films("", 1, filters)
        
        if not result:
            await callback.message.answer(
                "üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
                reply_markup=get_main_menu().as_markup()
            )
            return

        total_films = result.get('total', 0)
        films = result.get('items', [])[:FILMS_PER_PAGE]
        total_pages = (total_films + FILMS_PER_PAGE - 1) // FILMS_PER_PAGE

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º search_id –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
        search_id = generate_advanced_search_id("", user_id)
        await redis_service.store_query(
            f"adv_{search_id}",
            json.dumps({
                'query': "",
                'filters': filters
            })
        )

        keyboard = get_pagination_keyboard(f"adv_{search_id}", 1, total_pages, films)
        
        await callback.message.answer(
            format_search_results(
                query="",
                filters=format_filters_for_display(filters),
                total_films=total_films,
                page=1,
                total_pages=total_pages
            ),
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        logging.error(f"[ADVANCED SEARCH] Error in filters-only search: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu().as_markup()
        )
