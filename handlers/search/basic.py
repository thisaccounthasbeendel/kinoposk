from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.kinopoisk_api import kinopoisk_api
from services.redis_service import RedisService
from keyboards.pagination import get_pagination_keyboard, get_short_hash
from keyboards.search import get_cancel_keyboard
from keyboards.main import get_main_menu
from constants import WELCOME_MESSAGE, BASIC_SEARCH_RESULTS_TEMPLATE
import logging
import json  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç json
from utils.validators import TextValidator

# Create router instance
router = Router()

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
FILMS_PER_PAGE = 10

class SearchStates(StatesGroup):
    waiting_for_query = State()

async def start_search(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞"""
    cancel_message = await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_cancel_keyboard().as_markup()
    )
    await state.set_data({'cancel_message': cancel_message})
    await state.set_state(SearchStates.waiting_for_query)
    await callback.answer()

async def process_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    current_state = await state.get_state()
    logging.info(f"[DEBUG] Current state in basic search: {current_state}")
    
    query = message.text.strip()
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    safe_query = TextValidator.sanitize_text(query)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    state_data = await state.get_data()
    cancel_message = state_data.get('cancel_message')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API)
    result = await kinopoisk_api.search_films(safe_query, 1)
    if not result:
        await message.answer(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu().as_markup()
        )
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        if cancel_message:
            await cancel_message.delete()
        await state.clear()
        return

    total_films = result.get('total', 0)
    if total_films == 0:
        await message.answer(
            "üòï –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_main_menu().as_markup()
        )
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        if cancel_message:
            await cancel_message.delete()
        await state.clear()
        return

    films = result.get('items', [])[:FILMS_PER_PAGE]
    total_pages = (total_films + FILMS_PER_PAGE - 1) // FILMS_PER_PAGE

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º query_id –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
    query_id = get_short_hash(safe_query)
    logging.info(f"[SEARCH] Generated query_id: {query_id} for search query: {safe_query}")
    
    redis_service = RedisService.get_instance()
    if not await redis_service.store_query(query_id, safe_query):
        logging.error(f"[SEARCH] Failed to store search query in Redis. query_id: {query_id}, query: {safe_query}")
        await message.answer(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu().as_markup()
        )
        await state.clear()
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º query_id –≤ callback_data
    keyboard = get_pagination_keyboard(f"s_{query_id}", 1, total_pages, films)

    message_text = BASIC_SEARCH_RESULTS_TEMPLATE.format(
        query=safe_query,
        page=1,
        total_pages=total_pages,
        total_films=total_films
    )

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø—Ä–æ—Å–æ–º
        await message.delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        if cancel_message:
            await cancel_message.delete()
            
        await message.answer(
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"[SEARCH] Error sending message: {e}")
        await message.answer(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu().as_markup()
        )

    await state.clear()

@router.callback_query(lambda c: c.data.startswith('s_'))
async def handle_search_pagination(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ"""
    try:
        data = callback.data
        logging.info(f"Received callback_data: {data}")
        
        parts = data.split('_')
        if len(parts) >= 4:  # —Ñ–æ—Ä–º–∞—Ç: ['s', 'b4a5d', 'page', '2']
            search_hash = parts[1]  # –±–µ—Ä–µ–º —Ö–µ—à
            page = int(parts[-1])   # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await process_search_pagination(callback, search_hash, page)
        else:
            raise ValueError(f"Invalid s_ format: {parts}")
            
    except Exception as e:
        logging.error(f"Error in handle_search_pagination: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

async def process_search_pagination(callback: types.CallbackQuery, search_hash: str, page: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞"""
    redis_service = RedisService.get_instance()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ Redis –ø–æ query_id
        original_query = await redis_service.get_query(search_hash)
        if not original_query:
            logging.error(f"[SEARCH] Failed to get query from Redis for query_id: {search_hash}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
            return
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è API
        api_page = (page - 1) // 2 + 1
        result = await kinopoisk_api.search_films(original_query, api_page)
        
        if not result:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
            return
            
        total_films = result.get('total', 0)
        total_pages = (total_films + FILMS_PER_PAGE - 1) // FILMS_PER_PAGE
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –ø–æ–ª–æ–≤–∏–Ω—É
        films = result.get('items', [])
        start_idx = ((page - 1) % 2) * FILMS_PER_PAGE
        films = films[start_idx:start_idx + FILMS_PER_PAGE]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = BASIC_SEARCH_RESULTS_TEMPLATE.format(
            query=original_query,
            page=page,
            total_pages=total_pages,
            total_films=total_films
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è query_id
        keyboard = get_pagination_keyboard(f"s_{search_hash}", page, total_pages, films)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∏–ª—å–º–∞)
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        await callback.message.answer(
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logging.error(f"[SEARCH] Error in process_search_pagination: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º")

async def cancel_search(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    current_state = await state.get_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
    if current_state != SearchStates.waiting_for_query.state:
        await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        try:
            await callback.message.delete()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        return

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        text=WELCOME_MESSAGE,
        reply_markup=get_main_menu().as_markup(),
        parse_mode="HTML"
    )
    
    await callback.answer()

def register_search_handlers(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    router.callback_query.register(start_search, F.data == "search")
    router.message.register(process_search_query, SearchStates.waiting_for_query)
    router.callback_query.register(cancel_search, F.data == "cancel_search")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
    router.callback_query.register(
        handle_search_pagination,
        lambda c: c.data and c.data.startswith("s_")  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º s_{hash}_{page}
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    router.callback_query.register(
        handle_search_pagination,
        lambda c: c.data and "search_" in c.data and "_page_" in c.data  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º search_{hash}_page_{page}
    )
