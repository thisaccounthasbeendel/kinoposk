from aiogram import Router, F, types
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from datetime import datetime
from services.redis_service import RedisService
from keyboards.advanced_search import get_advanced_search_keyboard
import logging

router = Router()

def generate_year_ranges() -> list[tuple[str, str, str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ–¥–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (id, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π_—Ç–µ–∫—Å—Ç, –∑–Ω–∞—á–µ–Ω–∏–µ_–≥–æ–¥–∞)
    """
    current_year = datetime.now().year
    years = []
    
    # –î–æ 1950 - –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ 10 –ª–µ—Ç
    for decade in range(1900, 1950, 10):
        year_id = str(decade)
        year_range = f"{decade}-{decade+9}"
        years.append((year_id, year_range, year_range))
    
    # 1950-1969 - –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ 10 –ª–µ—Ç
    for decade in range(1950, 1970, 10):
        year_id = str(decade)
        year_range = f"{decade}-{decade+9}"
        years.append((year_id, year_range, year_range))
    
    # –° 1970 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ - –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ 5 –ª–µ—Ç
    start_year = 1970
    while start_year <= current_year:
        end_year = min(start_year + 4, current_year)
        year_id = str(start_year)
        year_range = f"{start_year}-{end_year}"
        years.append((year_id, year_range, year_range))
        start_year += 5
    
    return years

@router.inline_query(F.query.startswith("#—Ñ–∏–ª—å—Ç—Ä_–≥–æ–¥"))
async def years_inline_query(query: types.InlineQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞"""
    try:

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        years = generate_year_ranges()
        results = [
            InlineQueryResultArticle(
                id=year_id,
                title=f"üìÖ {display_text}",
                description=f"–§–∏–ª—å–º—ã {display_text} –≥–æ–¥–∞",
                input_message_content=InputTextMessageContent(
                    message_text=f"year_{year_id}_{display_text}"
                )
            )
            for year_id, display_text, _ in years
        ]
        
        await query.answer(results, cache_time=300)
        
    except Exception as e:
        logging.error(f"[YEARS] Error in inline query: {e}")
        await query.answer([], cache_time=300)

@router.message(F.text.startswith("year_"))
async def handle_year_selection(message: types.Message):
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç: year_ID_RANGE)
        _, year_id, year_range = message.text.split('_', 2)
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ message_id
        redis_service = RedisService.get_instance()
        filters, keyboard_message_id = await redis_service.get_search_filters(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters['year'] = {
            'id': year_id,
            'range': year_range
        }

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥–æ–¥–∞
        await message.delete()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if keyboard_message_id:
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=keyboard_message_id,
                )
            except Exception as e:
                logging.error(f"Error editing message: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        new_msg = await message.answer(
            "üîé <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_advanced_search_keyboard(filters).as_markup(),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–æ–≤—ã–π message_id
        await redis_service.save_search_filters(user_id, filters, new_msg.message_id)
        
    except Exception as e:
        logging.error(f"[YEARS] Error handling year selection: {e}")
