from aiogram import Router, F, types
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from services.redis_service import RedisService
from services.kinopoisk_api import kinopoisk_api
from keyboards.advanced_search import get_advanced_search_keyboard
import logging

router = Router()

@router.inline_query(F.query.startswith("#—Ñ–∏–ª—å—Ç—Ä_—Ä–µ–π—Ç–∏–Ω–≥"))
async def ratings_inline_query(query: types.InlineQuery):
    logging.info(f"[RATINGS] Processing inline query from user {query.from_user.id}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ kinopoisk_api.rating_values
    results = [
        InlineQueryResultArticle(
            id=rating_id,
            title=f"–û—Ç {rating_from} –¥–æ {rating_to}",
            description=f"–§–∏–ª—å–º—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {rating_from}-{rating_to}",
            input_message_content=InputTextMessageContent(
                message_text=f"rating_{rating_id}_{rating_from}-{rating_to}"
            )
        )
        for rating_id, (rating_from, rating_to) in kinopoisk_api.rating_values.items()
    ]
    
    logging.info(f"[RATINGS] Generated {len(results)} rating options")
    await query.answer(results, cache_time=300)

@router.message(F.text.startswith("rating_"))
async def process_rating_selection(message: types.Message):
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç: rating_ID_RANGE)
        _, rating_id, rating_range = message.text.split('_', 2)
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ message_id
        redis_service = RedisService.get_instance()
        filters, keyboard_message_id = await redis_service.get_search_filters(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters['rating'] = {
            'id': rating_id,
            'range': rating_range
        }

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–π—Ç–∏–Ω–≥–∞
        await message.delete()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if keyboard_message_id:
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=keyboard_message_id
                )
            except Exception as e:
                logging.error(f"Error deleting keyboard message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        new_msg = await message.answer(
            "üîé <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_advanced_search_keyboard(filters).as_markup(),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–æ–≤—ã–π message_id
        await redis_service.save_search_filters(user_id, filters, new_msg.message_id)
        
    except Exception as e:
        logging.error(f"[RATINGS] Error handling rating selection: {e}")
