from aiogram import Router, F, types
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from services.redis_service import RedisService
from services.kinopoisk_api import kinopoisk_api
from keyboards.advanced_search import get_advanced_search_keyboard
import logging

router = Router()

@router.inline_query(F.query.startswith("#—Ñ–∏–ª—å—Ç—Ä_–∂–∞–Ω—Ä"))
async def genres_inline_query(query: types.InlineQuery):
    logging.info(f"[GENRES] Processing inline query from user {query.from_user.id}")
    
    search_query = query.query.replace("#—Ñ–∏–ª—å—Ç—Ä_–∂–∞–Ω—Ä", "").strip().lower()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –∏–∑ API
    genres = await kinopoisk_api.genres
    if not genres:
        logging.error("[GENRES] Failed to get genres from API")
        return await query.answer(
            results=[],
            cache_time=300
        )
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    genres = [genre for genre in genres if genre.get('genre') and genre.get('id')]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–õ—é–±–æ–π"
    genres.insert(0, {"id": "none", "genre": "–õ—é–±–æ–π"})
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∂–∞–Ω—Ä—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if search_query:
        genres = [
            genre for genre in genres
            if search_query in genre['genre'].lower()
        ]
    
    results = [
        InlineQueryResultArticle(
            id=str(genre['id']),
            title=genre['genre'],
            input_message_content=InputTextMessageContent(
                message_text=f"genre_{genre['id']}_{genre['genre']}"
            ),
            description="–í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä"  # –î–æ–±–∞–≤–∏–º description –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        )
        for genre in genres
    ]
    
    logging.info(f"[GENRES] Generated {len(results)} genre options")
    
    # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"[GENRES] Results: {[{'id': r.id, 'title': r.title} for r in results]}")
    
    await query.answer(
        results=results,
        cache_time=300
    )

@router.message(F.text.startswith("genre_"))
async def handle_genre_selection(message: types.Message):
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç: genre_ID_NAME)
        _, genre_id, genre_name = message.text.split('_', 2)
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ message_id
        redis_service = RedisService.get_instance()
        filters, keyboard_message_id = await redis_service.get_search_filters(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters['genre'] = {
            'id': genre_id,
            'name': genre_name
        }

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–∞
        await message.delete()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if keyboard_message_id:
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=keyboard_message_id
                )
            except Exception as e:
                logging.error(f"Error deleting keyboard message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        new_msg = await message.answer(
            "üîé <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_advanced_search_keyboard(filters).as_markup(),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–æ–≤—ã–π message_id
        await redis_service.save_search_filters(user_id, filters, new_msg.message_id)
        
    except Exception as e:
        logging.error(f"[GENRES] Error handling genre selection: {e}")
