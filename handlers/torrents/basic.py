from aiogram import Router, F, types
from aiogram.types import FSInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.torrent_parser import TorrentParser
from services.kinopoisk_api import kinopoisk_api
from keyboards.torr_pagination import get_torrent_pagination_keyboard, get_torrent_details_keyboard
from services.redis_service import RedisService
from services.torrent_converter import torrent_converter
import logging
import re
from constants import (
    TORRENT_DETAILS_TEMPLATE,
    TORRENT_LIST_TEMPLATE,
    TORRENT_DOWNLOAD_CAPTION
)

router = Router()

TORRENTS_PER_PAGE = 5

async def process_torrent_pagination(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤"""
    try:
        parts = callback.data.split('_')
        kinopoisk_id = parts[1]
        page = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Ñ–∏–ª—å–º–∞
        redis_service = RedisService.get_instance()
        film_callback = await redis_service.get_query(f"film_callback_{kinopoisk_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        film_info = await kinopoisk_api.get_film_details(kinopoisk_id)
        is_series = film_info.get('type', '').lower() == 'tv_series'
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç—ã
        parser = TorrentParser()
        parser.set_filter(min_seeders=1)
        results = await parser.get_torrents(kinopoisk_id, is_series=is_series)
        film_name = film_info.get('nameRu', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å–º')
        
        if not results:
            await callback.answer("–¢–æ—Ä—Ä–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
            
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤
        total_torrents = len(results)
        total_pages = (total_torrents + TORRENTS_PER_PAGE - 1) // TORRENTS_PER_PAGE
        start_idx = (page - 1) * TORRENTS_PER_PAGE
        end_idx = start_idx + TORRENTS_PER_PAGE
        current_torrents = results[start_idx:end_idx]
        
        keyboard = get_torrent_pagination_keyboard(
            kinopoisk_id=kinopoisk_id,
            current_page=page,
            total_pages=total_pages,
            torrents=current_torrents,
            film_callback=film_callback
        )
        
        message_text = TORRENT_LIST_TEMPLATE.format(
            film_name=film_name,
            page=page,
            total_pages=total_pages,
            total_torrents=total_torrents
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        has_text = bool(callback.message.text)
        
        # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏ —ç—Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        if has_text and callback.data.startswith('tp_'):
            await callback.message.edit_text(
                text=message_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—è, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer(
                text=message_text,
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logging.error(f"[JACRED PAGINATION] Error in process_torrent_pagination: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤")

async def show_torrent_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä—Ä–µ–Ω—Ç–µ"""
    try:
        parts = callback.data.split('_')
        kinopoisk_id = parts[1]
        torrent_idx = int(parts[2])
        current_page = int(parts[3])  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä—Ä–µ–Ω—Ç–µ
        parser = TorrentParser()
        results = await parser.get_torrents(kinopoisk_id)
        torrent = results[torrent_idx]
        
        message_text = TORRENT_DETAILS_TEMPLATE.format(
            title=torrent['title'],
            season=torrent.get('season', '–ù/–î'),
            voice=torrent['voice'],
            quality=torrent['quality'],
            size=torrent['size_gb'],
            seeders=torrent.get('seeders', 0),
            score=torrent['score']
        )
        
        keyboard, magnet_hash = get_torrent_details_keyboard(
            kinopoisk_id=kinopoisk_id,
            magnet_link=torrent['magnet'],
            current_page=current_page
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–≥–Ω–µ—Ç-—Å—Å—ã–ª–∫—É –≤ Redis
        redis_service = RedisService.get_instance()
        await redis_service.store_query(f"magnet_{magnet_hash}", torrent['magnet'])
        
        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
            
    except Exception as e:
        logging.error(f"[JACRED PAGINATION] Error in show_torrent_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ—Ä—Ä–µ–Ω—Ç–∞")

@router.callback_query(lambda c: c.data.startswith('download_'))
async def handle_torrent_download(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª–∞"""
    try:
        parts = callback.data.split('_')
        magnet_hash = parts[1]
        kinopoisk_id = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–Ω–µ—Ç-—Å—Å—ã–ª–∫—É –∏–∑ Redis
        redis_service = RedisService.get_instance()
        magnet_link = await redis_service.get_query(f"magnet_{magnet_hash}")
        
        if not magnet_link:
            await callback.answer("–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø–æ–∏—Å–∫—É", show_alert=True)
            return
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞–≥–Ω–µ—Ç –≤ —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª
        result = await torrent_converter.convert_magnet(magnet_link)
        
        if result:
            torrent_name, torrent_path = result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if not torrent_path.exists():
                logging.error(f"Torrent file not found before sending: {torrent_path}")
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ñ–∞–π–ª–∞", show_alert=True)
                return
                
            logging.info(f"Sending torrent file: {torrent_path}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(
                text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–∞—á–µ",
                callback_data=f"back_to_torrent_{kinopoisk_id}_{magnet_hash}"
            ))

            builder.row(InlineKeyboardButton(
                text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            ))
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–¥–∞—á–µ
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ñ–∞–π–ª —Å –∫–Ω–æ–ø–∫–æ–π –≤ caption
            await callback.message.answer_document(
                FSInputFile(torrent_path),
                caption=TORRENT_DOWNLOAD_CAPTION.format(torrent_name=torrent_name),
                reply_markup=builder.as_markup()
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            if torrent_path.exists():
                logging.info(f"Cleaning up torrent file: {torrent_path}")
                torrent_converter.cleanup_file(torrent_path)
            else:
                logging.warning(f"Torrent file not found for cleanup: {torrent_path}")
                
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª", show_alert=True)
            
    except Exception as e:
        logging.error(f"[TORRENT DOWNLOAD] Error: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞", show_alert=True)

@router.callback_query(lambda c: c.data.startswith('back_to_torrent_'))
async def handle_back_to_torrent(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–¥–∞—á–µ"""
    try:
        parts = callback.data.split('_')
        kinopoisk_id = parts[3]
        magnet_hash = parts[4]
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–Ω–µ—Ç-—Å—Å—ã–ª–∫—É –∏–∑ Redis –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
        redis_service = RedisService.get_instance()
        magnet_link = await redis_service.get_query(f"magnet_{magnet_hash}")
        
        if not magnet_link:
            await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–¥–∞—á–µ —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä—Ä–µ–Ω—Ç–µ
        parser = TorrentParser()
        results = await parser.get_torrents(kinopoisk_id)
        
        # –ò—â–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç –ø–æ –º–∞–≥–Ω–µ—Ç-—Å—Å—ã–ª–∫–µ
        torrent = next((t for t in results if t['magnet'] == magnet_link), None)
        
        if not torrent:
            await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–¥–∞—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        message_text = TORRENT_DETAILS_TEMPLATE.format(
            title=torrent['title'],
            season=torrent.get('season', '–ù/–î'),
            voice=torrent['voice'],
            quality=torrent['quality'],
            size=torrent['size_gb'],
            seeders=torrent.get('seeders', 0),
            score=torrent['score']
        )
        
        keyboard, _ = get_torrent_details_keyboard(
            kinopoisk_id=kinopoisk_id,
            magnet_link=magnet_link,
            current_page=1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–¥–∞—á–µ
        await callback.message.answer(
            text=message_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        await callback.message.delete()
        
    except Exception as e:
        logging.error(f"[BACK TO TORRENT] Error: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–¥–∞—á–µ")

def register_torrent_handlers(router: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤"""
    router.callback_query.register(
        process_torrent_pagination,
        F.data.regexp(r'^tp_\d+_\d+$')  # tp_{kinopoisk_id}_{page}
    )
    router.callback_query.register(
        show_torrent_details,
        F.data.regexp(r'^td_\d+_\d+_\d+$')  # td_{kinopoisk_id}_{torrent_idx}_{page}
    )
    router.callback_query.register(
        handle_torrent_download,
        F.data.regexp(r'^download_[a-f0-9]+_\d+$')  # download_{magnet_hash}_{kinopoisk_id}
    )
    router.callback_query.register(
        handle_back_to_torrent,
        F.data.regexp(r'^back_to_torrent_\d+_[a-f0-9]+$')  # back_to_torrent_{kinopoisk_id}_{magnet_hash}
    )
