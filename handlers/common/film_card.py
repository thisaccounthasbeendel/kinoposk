from aiogram import types, Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.kinopoisk_api import kinopoisk_api
from services.torrent_parser import TorrentParser
from services.redis_service import RedisService  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
import logging

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

MAX_DESCRIPTION_LENGTH = 700

async def show_film_card(callback: types.CallbackQuery):
    try:
        logging.info(f"[FILM CARD] –í—Ö–æ–¥—è—â–∏–π callback_data: {callback.data}")
        parts = callback.data.split('_')
        logging.info(f"[FILM CARD] Split parts: {parts}")
        
        film_id = parts[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        redis_service = RedisService.get_instance()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if len(parts) >= 4:  # –î–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            if parts[3] == 'adv':  # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
                search_hash = parts[2]
                back_callback_data = f"btr_adv_{search_hash}_{parts[4]}"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å btr_
            elif parts[3] == 's':  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
                search_hash = parts[2]
                back_callback_data = f"btr_s_{search_hash}_{parts[4]}"    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å btr_
            else:  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ø
                collection_type = parts[2]
                page = parts[3]
                back_callback_data = f"btr_{collection_type}_{page}"      # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å btr_
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ callback'–∞
            await redis_service.store_query(f"film_callback_{film_id}", callback.data)
            await redis_service.store_query(f"back_callback_{film_id}", back_callback_data)
        else:
            raise ValueError(f"Invalid callback_data format: {callback.data}")
        
        logging.info(f"[FILM CARD] Making back button with callback_data: {back_callback_data}")
        
        logging.info(f"[FILM CARD] Fetching film details for ID: {film_id}")
        film = await kinopoisk_api.get_film_details(film_id)
        
        if not film:
            logging.error(f"[FILM CARD] Failed to get film details for ID: {film_id}")
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
        name_ru = film.get('nameRu')
        name_en = film.get('nameEn')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
        film_name = ""
        if name_ru and name_en:
            film_name = f"üá∑üá∫ <b>{name_ru}</b>\nüá∫üá∏ {name_en}"
        elif name_ru:
            film_name = f"üá∑üá∫ <b>{name_ru}</b>"
        elif name_en:
            film_name = f"üá∑üá∫ <b>{name_en}</b>"
        else:
            film_name = "üá∑üá∫ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞
        year = film.get('year')
        year = str(year) if year else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        rating = film.get('ratingKinopoisk')
        rating = str(rating) if rating else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–Ω—Ä–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        genres = film.get('genres', [])
        genres_str = ', '.join(g['genre'].capitalize() for g in genres) if genres else "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        countries = film.get('countries', [])
        countries_str = ', '.join(c['country'] for c in countries) if countries else "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        description = film.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        base_info = (
            f"{film_name}\n\n"
            f"üìÖ –ì–æ–¥: {year}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
            f"üé≠ –ñ–∞–Ω—Ä—ã: {genres_str}\n"
            f"üåé –°—Ç—Ä–∞–Ω—ã: {countries_str}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ description –Ω–µ None –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if description:
            # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –º–µ—Å—Ç–∞
            available_length = MAX_DESCRIPTION_LENGTH - len(base_info)
            if len(description) > available_length:
                description = description[:available_length].rsplit(' ', 1)[0] + "..."
        else:
            description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        caption = base_info + description

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–µ—Ä–∞
        poster_url = film.get('posterUrl')
        if not poster_url:
            await callback.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª—å–º–∞
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
        builder.button(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º",
            callback_data=back_callback_data
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤
        builder.button(
            text="üì• –°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç—ã",
            callback_data=f"tp_{film_id}_1"  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
        kinopoisk_app_link = f"https://www.kinopoisk.ru/film/{film_id}/"
        builder.button(
            text="üé• –û—Ç–∫—Ä—ã—Ç—å –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ",
            url=kinopoisk_app_link
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        builder.button(
            text="üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="main_menu"
        )
        
        builder.adjust(1, 2, 1)  # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: 1-2-1

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.answer_photo(
                photo=poster_url,
                caption=caption,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
            await callback.message.delete()
        except Exception as e:
            logging.error(f"[FILM CARD] Error sending photo: {str(e)}, builder data: {builder.buttons}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–∏–ª—å–º–∞")

    except Exception as e:
        logging.error(f"[FILM CARD] Error in show_film_card: {str(e)}, callback_data: {callback.data}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–∏–ª—å–º–∞")

def register_handlers(router: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–∏–ª—å–º–æ–≤"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    router.callback_query.register(
        show_film_card,
        F.data.startswith('f_')
    )

async def debug_callback(callback: types.CallbackQuery):
    logging.info(f"[FILM CARD] Debug: received callback with data: {callback.data}")
    await callback.answer()

def register_film_card_handlers(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–∏–ª—å–º–æ–≤"""
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback
    router.callback_query.register(debug_callback)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    router.callback_query.register(
        show_film_card,
        F.data.startswith('f_')
    )

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∏ —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
__all__ = ["router", "show_film_card", "register_handlers", "register_film_card_handlers"]
