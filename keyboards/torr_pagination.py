from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import hashlib

def get_torrent_pagination_keyboard(kinopoisk_id: str, current_page: int, total_pages: int, 
                                  torrents: list, film_callback: str) -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤
    
    Args:
        kinopoisk_id: ID —Ñ–∏–ª—å–º–∞ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        torrents: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        film_callback: –ö–æ–ª–ª–±–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Ñ–∏–ª—å–º–∞
    """
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–æ–Ω–∫—É
    for idx, torrent in enumerate(torrents):
        voice_display = torrent.get('voice', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
        if voice_display == "–î—É–±–ª—è–∂":
            voice_display = "–î—É–±–ª—è–∂ (–æ—Ä–∏–≥–∏–Ω–∞–ª)"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
        quality_display = torrent.get('quality_full', torrent['quality'])
        
        button_text = (
            f"üì• {quality_display} | "
            f"üíæ {torrent['size_gb']:.1f}GB | "
            f"üë• {torrent['seeders']} | "
            f"üéß {voice_display}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        builder.row(InlineKeyboardButton(
            text=button_text,
            callback_data=f"td_{kinopoisk_id}_{idx}_{current_page}"  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        ))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 1:
        nav_buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"tp_{kinopoisk_id}_{current_page-1}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_page = max(1, current_page - 2)
    end_page = min(total_pages, current_page + 2)
    
    for page in range(start_page, end_page + 1):
        text = f"[{page}]" if page == current_page else str(page)
        nav_buttons.append(InlineKeyboardButton(
            text=text,
            callback_data=f"tp_{kinopoisk_id}_{page}"
        ))
    
    if current_page < total_pages:
        nav_buttons.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"tp_{kinopoisk_id}_{current_page+1}"
        ))
    
    builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Ñ–∏–ª—å–º–∞
    builder.row(InlineKeyboardButton(
        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å–º—É",
        callback_data=film_callback
    ))

    builder.row(InlineKeyboardButton(
        text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))
    
    return builder

def get_torrent_details_keyboard(kinopoisk_id: str, magnet_link: str, current_page: int) -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ç–æ—Ä—Ä–µ–Ω—Ç–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –¥–ª—è –º–∞–≥–Ω–µ—Ç-—Å—Å—ã–ª–∫–∏
    magnet_hash = hashlib.md5(magnet_link.encode()).hexdigest()[:8]
    
    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ö–µ—à–µ–º
    builder.row(InlineKeyboardButton(
        text="üì• –°–∫–∞—á–∞—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç",
        callback_data=f"download_{magnet_hash}_{kinopoisk_id}"  # –î–æ–±–∞–≤–ª—è–µ–º kinopoisk_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    ))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    builder.row(InlineKeyboardButton(
        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
        callback_data=f"tp_{kinopoisk_id}_{current_page}"
    ))

    builder.row(InlineKeyboardButton(
        text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))
    
    return builder, magnet_hash  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Ö–µ—à –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis
